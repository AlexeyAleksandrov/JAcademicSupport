spring.application.name=JAcademicSupprt
spring.ai.ollama.base-url=http://localhost:11434
spring.ai.ollama.chat.options.model=openchat
spring.ai.ollama.chat.options.temperature=0.7

# GigaChat Configuration
# GigaChat uses OAuth 2.0 authentication with two-step process:
# 1. Exchange authorization token for access token via OAuth endpoint
# 2. Use access token for API requests
# The authorization token should be in Base64 format (Basic auth credentials)
# IMPORTANT: Set GIGACHAT_API_TOKEN as environment variable for security
gigachat.api.url=https://gigachat.devices.sberbank.ru/api/v1
gigachat.oauth.url=https://ngw.devices.sberbank.ru:9443/api/v2/oauth
gigachat.api.token=${GIGACHAT_API_TOKEN:}
gigachat.model=${GIGACHAT_MODEL:GigaChat-2-Max}
gigachat.scope=${GIGACHAT_SCOPE:GIGACHAT_API_PERS}

#spring.datasource.url=jdbc:postgresql://localhost:5432/AcademicSupport
#spring.datasource.username=postgres
#spring.datasource.password=1111

spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

spring.mvc.pathmatch.matching-strategy=ant_path_matcher
spring.web.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/

spring.profiles.active=local

# JWT Configuration
# IMPORTANT: Set JWT_SECRET as environment variable for production
# Secret must be at least 256 bits (32 characters) for HS256 algorithm
jwt.secret=${JWT_SECRET:MySecretKeyForJWTTokenGenerationThatIsAtLeast256BitsLongForHS256Algorithm}
# JWT token expiration time in milliseconds (default: 24 hours = 86400000 ms)
jwt.expiration=${JWT_EXPIRATION:86400000}

# Spring Boot Actuator Configuration
# Enable health endpoint for deployment verification
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true
# Enable detailed health checks
management.health.db.enabled=true
management.health.diskspace.enabled=true
# Liveness and readiness probes for Kubernetes/Docker
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true